// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/content/content.proto

package content

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/content/content.proto", fileDescriptor_8019c40320244587) }

var fileDescriptor_8019c40320244587 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x48, 0xd2, 0x4f,
	0xce, 0xcf, 0x2b, 0x49, 0xcd, 0x2b, 0x81, 0xd1, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x5c,
	0x05, 0x49, 0x7a, 0x50, 0x11, 0x29, 0x35, 0x4c, 0x55, 0xf1, 0xc5, 0xa9, 0x45, 0x65, 0x99, 0xc9,
	0xa9, 0xf1, 0x25, 0xf9, 0x05, 0x99, 0xc9, 0x10, 0x3d, 0x52, 0x1a, 0x78, 0xd4, 0xa5, 0xa7, 0xe6,
	0xa5, 0x16, 0x25, 0xe6, 0x40, 0x55, 0x8a, 0x21, 0xa9, 0x44, 0x32, 0xc1, 0x68, 0x19, 0x13, 0x17,
	0x9f, 0x33, 0x44, 0x3c, 0x18, 0xa2, 0x51, 0xc8, 0x89, 0x8b, 0xdb, 0xb9, 0x28, 0x35, 0xb1, 0x24,
	0x35, 0x04, 0xa4, 0x4e, 0x48, 0x4e, 0x0f, 0xe1, 0x30, 0x3d, 0x24, 0x89, 0xa0, 0xd4, 0xc2, 0xd2,
	0xd4, 0xe2, 0x12, 0x29, 0x41, 0x64, 0x79, 0xb0, 0x8c, 0x12, 0x83, 0x90, 0x2b, 0x17, 0xbf, 0x4b,
	0x6a, 0x4e, 0x2a, 0x54, 0xa9, 0x53, 0xa5, 0xa7, 0x8b, 0x90, 0x2c, 0xb2, 0x3a, 0x88, 0x24, 0x48,
	0x1c, 0xab, 0x31, 0xae, 0xb9, 0x05, 0x25, 0x95, 0x4a, 0x0c, 0x08, 0xa7, 0x04, 0x97, 0xe4, 0x17,
	0x55, 0x52, 0xe8, 0x14, 0xb0, 0x19, 0xe4, 0x3a, 0xc5, 0x89, 0x33, 0x8a, 0x1d, 0x2a, 0x94, 0xc4,
	0x06, 0x0e, 0x3a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xfa, 0xdc, 0xce, 0xcc, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentServiceClient interface {
	// Topic
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Topic, error)
	DeleteTopicByID(ctx context.Context, in *DeleteByIDRequest, opts ...grpc.CallOption) (*Empty, error)
	// Story
	CreateStory(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Topic, error)
	DeleteStoryByID(ctx context.Context, in *DeleteByIDRequest, opts ...grpc.CallOption) (*Empty, error)
}

type contentServiceClient struct {
	cc *grpc.ClientConn
}

func NewContentServiceClient(cc *grpc.ClientConn) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/pb.content.ContentService/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteTopicByID(ctx context.Context, in *DeleteByIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.content.ContentService/DeleteTopicByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateStory(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/pb.content.ContentService/CreateStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteStoryByID(ctx context.Context, in *DeleteByIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.content.ContentService/DeleteStoryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
type ContentServiceServer interface {
	// Topic
	CreateTopic(context.Context, *CreateTopicRequest) (*Topic, error)
	DeleteTopicByID(context.Context, *DeleteByIDRequest) (*Empty, error)
	// Story
	CreateStory(context.Context, *CreateTopicRequest) (*Topic, error)
	DeleteStoryByID(context.Context, *DeleteByIDRequest) (*Empty, error)
}

// UnimplementedContentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (*UnimplementedContentServiceServer) CreateTopic(ctx context.Context, req *CreateTopicRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (*UnimplementedContentServiceServer) DeleteTopicByID(ctx context.Context, req *DeleteByIDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopicByID not implemented")
}
func (*UnimplementedContentServiceServer) CreateStory(ctx context.Context, req *CreateTopicRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (*UnimplementedContentServiceServer) DeleteStoryByID(ctx context.Context, req *DeleteByIDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoryByID not implemented")
}

func RegisterContentServiceServer(s *grpc.Server, srv ContentServiceServer) {
	s.RegisterService(&_ContentService_serviceDesc, srv)
}

func _ContentService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.content.ContentService/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteTopicByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteTopicByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.content.ContentService/DeleteTopicByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteTopicByID(ctx, req.(*DeleteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.content.ContentService/CreateStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateStory(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteStoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteStoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.content.ContentService/DeleteStoryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteStoryByID(ctx, req.(*DeleteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.content.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopic",
			Handler:    _ContentService_CreateTopic_Handler,
		},
		{
			MethodName: "DeleteTopicByID",
			Handler:    _ContentService_DeleteTopicByID_Handler,
		},
		{
			MethodName: "CreateStory",
			Handler:    _ContentService_CreateStory_Handler,
		},
		{
			MethodName: "DeleteStoryByID",
			Handler:    _ContentService_DeleteStoryByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/content/content.proto",
}
