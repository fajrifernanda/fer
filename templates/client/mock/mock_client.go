// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kumparan.com/yowez/skeleton-service/pb/skeleton (interfaces: HelloServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	skeleton "gitlab.kumparan.com/yowez/skeleton-service/pb/skeleton"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockHelloServiceClient is a mock of HelloServiceClient interface
type MockHelloServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServiceClientMockRecorder
}

// MockHelloServiceClientMockRecorder is the mock recorder for MockHelloServiceClient
type MockHelloServiceClientMockRecorder struct {
	mock *MockHelloServiceClient
}

// NewMockHelloServiceClient creates a new mock instance
func NewMockHelloServiceClient(ctrl *gomock.Controller) *MockHelloServiceClient {
	mock := &MockHelloServiceClient{ctrl: ctrl}
	mock.recorder = &MockHelloServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelloServiceClient) EXPECT() *MockHelloServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockHelloServiceClient) Create(arg0 context.Context, arg1 *skeleton.Greeting, arg2 ...grpc.CallOption) (*skeleton.Greeting, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*skeleton.Greeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockHelloServiceClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHelloServiceClient)(nil).Create), varargs...)
}

// FindByID mocks base method
func (m *MockHelloServiceClient) FindByID(arg0 context.Context, arg1 *skeleton.FindByIDRequest, arg2 ...grpc.CallOption) (*skeleton.Greeting, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByID", varargs...)
	ret0, _ := ret[0].(*skeleton.Greeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockHelloServiceClientMockRecorder) FindByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockHelloServiceClient)(nil).FindByID), varargs...)
}

// SayHello mocks base method
func (m *MockHelloServiceClient) SayHello(arg0 context.Context, arg1 *skeleton.HelloRequest, arg2 ...grpc.CallOption) (*skeleton.HelloResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*skeleton.HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello
func (mr *MockHelloServiceClientMockRecorder) SayHello(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockHelloServiceClient)(nil).SayHello), varargs...)
}
